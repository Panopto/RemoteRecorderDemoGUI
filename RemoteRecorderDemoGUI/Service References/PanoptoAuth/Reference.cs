//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RemoteRecorderDemoGUI.PanoptoAuth {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PanoptoAuth.IAuth")]
    public interface IAuth {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuth/LogOnWithPassword", ReplyAction="http://tempuri.org/IAuth/LogOnWithPasswordResponse")]
        bool LogOnWithPassword(string userKey, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuth/LogOnWithPassword", ReplyAction="http://tempuri.org/IAuth/LogOnWithPasswordResponse")]
        System.Threading.Tasks.Task<bool> LogOnWithPasswordAsync(string userKey, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuth/LogOnWithExternalProvider", ReplyAction="http://tempuri.org/IAuth/LogOnWithExternalProviderResponse")]
        bool LogOnWithExternalProvider(string userKey, string authCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuth/LogOnWithExternalProvider", ReplyAction="http://tempuri.org/IAuth/LogOnWithExternalProviderResponse")]
        System.Threading.Tasks.Task<bool> LogOnWithExternalProviderAsync(string userKey, string authCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuth/GetServerVersion", ReplyAction="http://tempuri.org/IAuth/GetServerVersionResponse")]
        string GetServerVersion();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuth/GetServerVersion", ReplyAction="http://tempuri.org/IAuth/GetServerVersionResponse")]
        System.Threading.Tasks.Task<string> GetServerVersionAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAuthChannel : RemoteRecorderDemoGUI.PanoptoAuth.IAuth, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuthClient : System.ServiceModel.ClientBase<RemoteRecorderDemoGUI.PanoptoAuth.IAuth>, RemoteRecorderDemoGUI.PanoptoAuth.IAuth {
        
        public AuthClient() {
        }
        
        public AuthClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AuthClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool LogOnWithPassword(string userKey, string password) {
            return base.Channel.LogOnWithPassword(userKey, password);
        }
        
        public System.Threading.Tasks.Task<bool> LogOnWithPasswordAsync(string userKey, string password) {
            return base.Channel.LogOnWithPasswordAsync(userKey, password);
        }
        
        public bool LogOnWithExternalProvider(string userKey, string authCode) {
            return base.Channel.LogOnWithExternalProvider(userKey, authCode);
        }
        
        public System.Threading.Tasks.Task<bool> LogOnWithExternalProviderAsync(string userKey, string authCode) {
            return base.Channel.LogOnWithExternalProviderAsync(userKey, authCode);
        }
        
        public string GetServerVersion() {
            return base.Channel.GetServerVersion();
        }
        
        public System.Threading.Tasks.Task<string> GetServerVersionAsync() {
            return base.Channel.GetServerVersionAsync();
        }
    }
}
